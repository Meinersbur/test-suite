"""Test module to collect compile time metrics. This just finds and summarizes
the *.time files generated by the build."""
from litsupport.modules import timeit
import os
import logging


def _getCompileTime(context):
    prefix = context.prefix
    outfile = context.outfile
    
    testpath = context.testfile 
    testdir,testfile = os.path.split(testpath)
    testbase,testext = os.path.splitext(testfile)
    if context.prefix is None:
      testname = testbase
    else:
      assert(testbase.startswith(context.prefix))
      testname = testbase[len(prefix):]
    
    compile_time = 0.0
    link_time = 0.0
    dir = os.path.dirname(context.test.getFilePath())
    NumCompileTime = 0
    NumLinkTime = 0
    
    linktimefile = context.executable + '.link.time'
    if not os.path.isfile(linktimefile):
       logging.error("linktimefile not found: {linktimefile}".format(linktimefile=linktimefile))
       raise Exception("linktimefile not found")
    link_time += timeit.getUserTime(linktimefile)

    # TODO: Just walking through "testdir,'CMakeFiles', testbase + '.dir'" looking for .o.time files might be simpler
    assert(len(context.sources)>=1)   
    for source in context.sources:
      sourcedir,sourcefile = os.path.split(source)
      sourcerel = os.path.relpath(source, start=context.sourcedir)
      sourcerel = '/'.join('__' if s == '..' else s for s in sourcerel.split('/') )
      sourcereldir,_ = os.path.split(sourcerel)
      sourcebase,sourcext = os.path.splitext(sourcefile)
      
      cctimefile = os.path.join(testdir,'CMakeFiles', testbase + '.dir',sourcereldir,sourcefile+'.o.time')
      #print("cctimefile",cctimefile)
      if not os.path.isfile(cctimefile):
         logging.warning("Compile time file {cctimefile} not found".format(cctimefile=cctimefile))
         raise Exception("Compile time file not found")
      compile_time += timeit.getUserTime(cctimefile)

    return {
        'compile_time': compile_time,
        'link_time': link_time,
    }


def mutatePlan(context, plan):
    plan.metric_collectors.append(_getCompileTime)
